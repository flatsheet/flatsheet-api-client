[{"description":"Flatsheet Accounts","tags":[{"title":"class","description":null,"type":null,"name":"Accounts"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"client"},{"title":"example","description":"var flatsheet = require('flatsheet-api-client');\nvar client = flatsheet();\nclient.accounts.list()"},{"title":"name","name":"Accounts"},{"title":"kind","kind":"class"}],"context":{"loc":{"start":{"line":12,"column":0},"end":{"line":15,"column":1}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/accounts.js","code":"module.exports = Accounts\n\n/**\n * Flatsheet Accounts\n * @class Accounts\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.accounts.list()\n */\nfunction Accounts (client) {\n  if (!(this instanceof Accounts)) return new Accounts(client)\n  this.client = client\n}\n\n/**\n* Get an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.get(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.get = function (username, cb) {\n  return this.client.request('get', 'accounts/' + username, null, cb)\n}\n\n/**\n* Get list of accounts\n* @param {Function} callback a callback with error and accounts arguments\n* @example\n* client.acounts.list(function (err, accounts)) {\n*\n* })\n*/\nAccounts.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'accounts', opts, cb)\n}\n\n/**\n* Create an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.create(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.create = function (opts, cb) {\n  return this.client.request('post', 'accounts', opts, cb)\n}\n\n/**\n* Update an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.update(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.update = function (username, opts, cb) {\n  return this.client.request('put', 'accounts/' + username, opts, cb)\n}\n\n/**\n* Delete an account\n* @param {Function} callback a callback with error argument\n* @example\n* client.acounts.delete(function (err)) {\n*\n* })\n*/\nAccounts.prototype.delete = function (username, cb) {\n  return this.client.request('delete', 'accounts/' + username, null, cb)\n}\n","path":"accounts.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/accounts.js#L12-L15"},"params":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"client"}],"examples":["<span class=\"hljs-keyword\">var</span> flatsheet = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'flatsheet-api-client'</span>);\n<span class=\"hljs-keyword\">var</span> client = flatsheet();\nclient.accounts.list()"],"name":"Accounts","kind":"class","members":{"instance":[{"description":"Update an account","tags":[{"title":"param","description":"a callback with error and account arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.acounts.update(function (err, account)) {\n\n})"},{"title":"name","name":"update"},{"title":"memberof","description":"Accounts"},{"title":"instance"}],"context":{"loc":{"start":{"line":61,"column":0},"end":{"line":73,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/accounts.js","code":"module.exports = Accounts\n\n/**\n * Flatsheet Accounts\n * @class Accounts\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.accounts.list()\n */\nfunction Accounts (client) {\n  if (!(this instanceof Accounts)) return new Accounts(client)\n  this.client = client\n}\n\n/**\n* Get an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.get(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.get = function (username, cb) {\n  return this.client.request('get', 'accounts/' + username, null, cb)\n}\n\n/**\n* Get list of accounts\n* @param {Function} callback a callback with error and accounts arguments\n* @example\n* client.acounts.list(function (err, accounts)) {\n*\n* })\n*/\nAccounts.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'accounts', opts, cb)\n}\n\n/**\n* Create an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.create(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.create = function (opts, cb) {\n  return this.client.request('post', 'accounts', opts, cb)\n}\n\n/**\n* Update an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.update(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.update = function (username, opts, cb) {\n  return this.client.request('put', 'accounts/' + username, opts, cb)\n}\n\n/**\n* Delete an account\n* @param {Function} callback a callback with error argument\n* @example\n* client.acounts.delete(function (err)) {\n*\n* })\n*/\nAccounts.prototype.delete = function (username, cb) {\n  return this.client.request('delete', 'accounts/' + username, null, cb)\n}\n","path":"accounts.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/accounts.js#L61-L73"},"params":[{"title":"param","description":"a callback with error and account arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.acounts.update(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, account)</span>) </span>{\n\n})"],"name":"update","memberof":"Accounts","scope":"instance","members":{"instance":[],"static":[]},"path":["Accounts","update"]},{"description":"Get list of accounts","tags":[{"title":"param","description":"a callback with error and accounts arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.acounts.list(function (err, accounts)) {\n\n})"},{"title":"name","name":"list"},{"title":"memberof","description":"Accounts"},{"title":"instance"}],"context":{"loc":{"start":{"line":37,"column":0},"end":{"line":49,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/accounts.js","code":"module.exports = Accounts\n\n/**\n * Flatsheet Accounts\n * @class Accounts\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.accounts.list()\n */\nfunction Accounts (client) {\n  if (!(this instanceof Accounts)) return new Accounts(client)\n  this.client = client\n}\n\n/**\n* Get an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.get(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.get = function (username, cb) {\n  return this.client.request('get', 'accounts/' + username, null, cb)\n}\n\n/**\n* Get list of accounts\n* @param {Function} callback a callback with error and accounts arguments\n* @example\n* client.acounts.list(function (err, accounts)) {\n*\n* })\n*/\nAccounts.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'accounts', opts, cb)\n}\n\n/**\n* Create an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.create(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.create = function (opts, cb) {\n  return this.client.request('post', 'accounts', opts, cb)\n}\n\n/**\n* Update an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.update(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.update = function (username, opts, cb) {\n  return this.client.request('put', 'accounts/' + username, opts, cb)\n}\n\n/**\n* Delete an account\n* @param {Function} callback a callback with error argument\n* @example\n* client.acounts.delete(function (err)) {\n*\n* })\n*/\nAccounts.prototype.delete = function (username, cb) {\n  return this.client.request('delete', 'accounts/' + username, null, cb)\n}\n","path":"accounts.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/accounts.js#L37-L49"},"params":[{"title":"param","description":"a callback with error and accounts arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.acounts.list(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, accounts)</span>) </span>{\n\n})"],"name":"list","memberof":"Accounts","scope":"instance","members":{"instance":[],"static":[]},"path":["Accounts","list"]},{"description":"Get an account","tags":[{"title":"param","description":"a callback with error and account arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.acounts.get(function (err, account)) {\n\n})"},{"title":"name","name":"get"},{"title":"memberof","description":"Accounts"},{"title":"instance"}],"context":{"loc":{"start":{"line":25,"column":0},"end":{"line":37,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/accounts.js","code":"module.exports = Accounts\n\n/**\n * Flatsheet Accounts\n * @class Accounts\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.accounts.list()\n */\nfunction Accounts (client) {\n  if (!(this instanceof Accounts)) return new Accounts(client)\n  this.client = client\n}\n\n/**\n* Get an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.get(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.get = function (username, cb) {\n  return this.client.request('get', 'accounts/' + username, null, cb)\n}\n\n/**\n* Get list of accounts\n* @param {Function} callback a callback with error and accounts arguments\n* @example\n* client.acounts.list(function (err, accounts)) {\n*\n* })\n*/\nAccounts.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'accounts', opts, cb)\n}\n\n/**\n* Create an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.create(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.create = function (opts, cb) {\n  return this.client.request('post', 'accounts', opts, cb)\n}\n\n/**\n* Update an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.update(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.update = function (username, opts, cb) {\n  return this.client.request('put', 'accounts/' + username, opts, cb)\n}\n\n/**\n* Delete an account\n* @param {Function} callback a callback with error argument\n* @example\n* client.acounts.delete(function (err)) {\n*\n* })\n*/\nAccounts.prototype.delete = function (username, cb) {\n  return this.client.request('delete', 'accounts/' + username, null, cb)\n}\n","path":"accounts.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/accounts.js#L25-L37"},"params":[{"title":"param","description":"a callback with error and account arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.acounts.get(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, account)</span>) </span>{\n\n})"],"name":"get","memberof":"Accounts","scope":"instance","members":{"instance":[],"static":[]},"path":["Accounts","get"]},{"description":"Delete an account","tags":[{"title":"param","description":"a callback with error argument","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.acounts.delete(function (err)) {\n\n})"},{"title":"name","name":"delete"},{"title":"memberof","description":"Accounts"},{"title":"instance"}],"context":{"loc":{"start":{"line":73,"column":0},"end":{"line":76,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/accounts.js","code":"module.exports = Accounts\n\n/**\n * Flatsheet Accounts\n * @class Accounts\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.accounts.list()\n */\nfunction Accounts (client) {\n  if (!(this instanceof Accounts)) return new Accounts(client)\n  this.client = client\n}\n\n/**\n* Get an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.get(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.get = function (username, cb) {\n  return this.client.request('get', 'accounts/' + username, null, cb)\n}\n\n/**\n* Get list of accounts\n* @param {Function} callback a callback with error and accounts arguments\n* @example\n* client.acounts.list(function (err, accounts)) {\n*\n* })\n*/\nAccounts.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'accounts', opts, cb)\n}\n\n/**\n* Create an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.create(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.create = function (opts, cb) {\n  return this.client.request('post', 'accounts', opts, cb)\n}\n\n/**\n* Update an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.update(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.update = function (username, opts, cb) {\n  return this.client.request('put', 'accounts/' + username, opts, cb)\n}\n\n/**\n* Delete an account\n* @param {Function} callback a callback with error argument\n* @example\n* client.acounts.delete(function (err)) {\n*\n* })\n*/\nAccounts.prototype.delete = function (username, cb) {\n  return this.client.request('delete', 'accounts/' + username, null, cb)\n}\n","path":"accounts.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/accounts.js#L73-L76"},"params":[{"title":"param","description":"a callback with error argument","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.acounts.delete(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span>) </span>{\n\n})"],"name":"delete","memberof":"Accounts","scope":"instance","members":{"instance":[],"static":[]},"path":["Accounts","delete"]},{"description":"Create an account","tags":[{"title":"param","description":"a callback with error and account arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.acounts.create(function (err, account)) {\n\n})"},{"title":"name","name":"create"},{"title":"memberof","description":"Accounts"},{"title":"instance"}],"context":{"loc":{"start":{"line":49,"column":0},"end":{"line":61,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/accounts.js","code":"module.exports = Accounts\n\n/**\n * Flatsheet Accounts\n * @class Accounts\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.accounts.list()\n */\nfunction Accounts (client) {\n  if (!(this instanceof Accounts)) return new Accounts(client)\n  this.client = client\n}\n\n/**\n* Get an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.get(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.get = function (username, cb) {\n  return this.client.request('get', 'accounts/' + username, null, cb)\n}\n\n/**\n* Get list of accounts\n* @param {Function} callback a callback with error and accounts arguments\n* @example\n* client.acounts.list(function (err, accounts)) {\n*\n* })\n*/\nAccounts.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'accounts', opts, cb)\n}\n\n/**\n* Create an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.create(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.create = function (opts, cb) {\n  return this.client.request('post', 'accounts', opts, cb)\n}\n\n/**\n* Update an account\n* @param {Function} callback a callback with error and account arguments\n* @example\n* client.acounts.update(function (err, account)) {\n*\n* })\n*/\nAccounts.prototype.update = function (username, opts, cb) {\n  return this.client.request('put', 'accounts/' + username, opts, cb)\n}\n\n/**\n* Delete an account\n* @param {Function} callback a callback with error argument\n* @example\n* client.acounts.delete(function (err)) {\n*\n* })\n*/\nAccounts.prototype.delete = function (username, cb) {\n  return this.client.request('delete', 'accounts/' + username, null, cb)\n}\n","path":"accounts.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/accounts.js#L49-L61"},"params":[{"title":"param","description":"a callback with error and account arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.acounts.create(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, account)</span>) </span>{\n\n})"],"name":"create","memberof":"Accounts","scope":"instance","members":{"instance":[],"static":[]},"path":["Accounts","create"]}],"static":[]},"path":["Accounts"]},{"description":"Flatsheet API Client","tags":[{"title":"class","description":null,"type":null,"name":"Flatsheet"},{"title":"param","description":"options for the api client","type":{"type":"NameExpression","name":"Object"},"name":"options"},{"title":"param","description":"flatsheet server host","type":{"type":"NameExpression","name":"String"},"name":"options.host"},{"title":"param","description":"username, only needed if making POST, PUT, DELETE requests","type":{"type":"NameExpression","name":"String"},"name":"options.username"},{"title":"param","description":"password, only needed if making POST, PUT, DELETE requests","type":{"type":"NameExpression","name":"String"},"name":"options.password"},{"title":"example","description":"var flatsheet = require('flatsheet-api-client');\nvar client = flatsheet();"},{"title":"name","name":"Flatsheet"},{"title":"kind","kind":"class"}],"context":{"loc":{"start":{"line":18,"column":0},"end":{"line":32,"column":1}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/index.js","code":"var qs = require('querystring')\nvar request = require('request')\n\nmodule.exports = Flatsheet\n\n/**\n * Flatsheet API Client\n * @class Flatsheet\n * @param {Object} options options for the api client\n * @param {String} options.host flatsheet server host\n * @param {String} options.username username, only needed if making POST, PUT, DELETE requests\n * @param {String} options.password password, only needed if making POST, PUT, DELETE requests\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n *\n */\nfunction Flatsheet (options) {\n  if (!(this instanceof Flatsheet)) return new Flatsheet(options)\n  options || (options = {})\n\n  this.account = {\n    username: options.username || '',\n    password: options.password || ''\n  }\n\n  this.host = options.host || 'https://app.flatsheet.io'\n  this.apiVersion = options.apiVersion || '/v2/'\n\n  this.sheets = require('./sheets')(this)\n  this.accounts = require('./accounts')(this)\n}\n\nFlatsheet.prototype.request = function (method, path, params, cb) {\n  if (typeof params === 'function') {\n    cb = params\n    params = {}\n  }\n\n  var opts = {}\n\n  if (method === 'get') {\n    params = qs.stringify(params)\n    opts.uri = this.fullUrl(path, params)\n  } else {\n    opts.uri = this.fullUrl(path)\n    opts.body = params\n  }\n\n  opts.json = true\n  opts.method = method\n\n  if (this.account.username && this.account.password) {\n    opts.headers = {\n      'Authorization': this.account.username + ':' + this.account.password\n    }\n  }\n\n  if (typeof cb === 'undefined') return request(opts)\n  else request(opts, getResponse)\n\n  function getResponse (error, response, body) {\n    if (cb) {\n      if (error) return cb(error)\n      if (response.statusCode >= 400) return cb({ error: response.statusCode })\n      return cb(null, body)\n    }\n  }\n}\n\nFlatsheet.prototype.fullUrl = function fullUrl (path, params) {\n  var url = this.host + '/api' + this.apiVersion + path + '/'\n  if (params) url += '?' + params\n  return url\n}\n","path":"index.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/index.js#L18-L32"},"params":[{"title":"param","description":"options for the api client","type":{"type":"NameExpression","name":"Object"},"name":"options"},{"title":"param","description":"flatsheet server host","type":{"type":"NameExpression","name":"String"},"name":"options.host"},{"title":"param","description":"username, only needed if making POST, PUT, DELETE requests","type":{"type":"NameExpression","name":"String"},"name":"options.username"},{"title":"param","description":"password, only needed if making POST, PUT, DELETE requests","type":{"type":"NameExpression","name":"String"},"name":"options.password"}],"examples":["<span class=\"hljs-keyword\">var</span> flatsheet = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'flatsheet-api-client'</span>);\n<span class=\"hljs-keyword\">var</span> client = flatsheet();"],"name":"Flatsheet","kind":"class","members":{"instance":[],"static":[]},"path":["Flatsheet"]},{"description":"Flatsheet Sheets","tags":[{"title":"class","description":null,"type":null,"name":"Sheets"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"client"},{"title":"example","description":"var flatsheet = require('flatsheet-api-client');\nvar client = flatsheet();\nclient.sheets.list()"},{"title":"name","name":"Sheets"},{"title":"kind","kind":"class"}],"context":{"loc":{"start":{"line":12,"column":0},"end":{"line":15,"column":1}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/sheets.js","code":"module.exports = Sheets\n\n/**\n * Flatsheet Sheets\n * @class Sheets\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.sheets.list()\n */\nfunction Sheets (client) {\n  if (!(this instanceof Sheets)) return new Sheets(client)\n  this.client = client\n}\n\n/**\n* Get sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.get(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.get = function (id, cb) {\n  return this.client.request('get', 'sheets/' + id, null, cb)\n}\n\n/**\n* Get list of sheets\n* @param {Function} callback a callback with error and sheets arguments\n* @example\n* client.sheets.list(function (err, sheets)) {\n*\n* })\n*/\nSheets.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'sheets', opts, cb)\n}\n\n/**\n* Create a sheet\n* @param {Object} the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.create(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.create = function (sheet, cb) {\n  return this.client.request('post', 'sheets', sheet, cb)\n}\n\n/**\n* Update a sheet\n* @param {Object} sheet the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.update(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.update = function (sheet, cb) {\n  return this.client.request('put', 'sheets/' + sheet.id, sheet, cb)\n}\n\n/**\n* Add a row to a sheet\n* @param {String} id the ID of the sheet\n* @param {Object} row an object that represents a row in the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.addRow(function (err, sheet)) {\n*\n* })\n*\n*/\nSheets.prototype.addRow = function addRow (id, row, cb) {\n  var self = this\n\n  this.get(id, function (err, req) {\n    if (err) return cb(err)\n    var sheet = req\n    sheet.rows.push(row)\n    self.update(sheet, cb)\n  })\n}\n\n/**\n* Delete a sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error argument\n* @example\n* client.sheets.delete(function (err)) {\n*\n* })\n*/\nSheets.prototype.delete = function (id, cb) {\n  return this.client.request('delete', 'sheets/' + id, null, cb)\n}\n","path":"sheets.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/sheets.js#L12-L15"},"params":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"client"}],"examples":["<span class=\"hljs-keyword\">var</span> flatsheet = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'flatsheet-api-client'</span>);\n<span class=\"hljs-keyword\">var</span> client = flatsheet();\nclient.sheets.list()"],"name":"Sheets","kind":"class","members":{"instance":[{"description":"Get sheet","tags":[{"title":"param","description":"the ID of the sheet","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"a callback with error and sheet arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.sheets.get(function (err, sheet)) {\n\n})"},{"title":"name","name":"get"},{"title":"memberof","description":"Sheets"},{"title":"instance"}],"context":{"loc":{"start":{"line":26,"column":0},"end":{"line":38,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/sheets.js","code":"module.exports = Sheets\n\n/**\n * Flatsheet Sheets\n * @class Sheets\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.sheets.list()\n */\nfunction Sheets (client) {\n  if (!(this instanceof Sheets)) return new Sheets(client)\n  this.client = client\n}\n\n/**\n* Get sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.get(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.get = function (id, cb) {\n  return this.client.request('get', 'sheets/' + id, null, cb)\n}\n\n/**\n* Get list of sheets\n* @param {Function} callback a callback with error and sheets arguments\n* @example\n* client.sheets.list(function (err, sheets)) {\n*\n* })\n*/\nSheets.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'sheets', opts, cb)\n}\n\n/**\n* Create a sheet\n* @param {Object} the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.create(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.create = function (sheet, cb) {\n  return this.client.request('post', 'sheets', sheet, cb)\n}\n\n/**\n* Update a sheet\n* @param {Object} sheet the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.update(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.update = function (sheet, cb) {\n  return this.client.request('put', 'sheets/' + sheet.id, sheet, cb)\n}\n\n/**\n* Add a row to a sheet\n* @param {String} id the ID of the sheet\n* @param {Object} row an object that represents a row in the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.addRow(function (err, sheet)) {\n*\n* })\n*\n*/\nSheets.prototype.addRow = function addRow (id, row, cb) {\n  var self = this\n\n  this.get(id, function (err, req) {\n    if (err) return cb(err)\n    var sheet = req\n    sheet.rows.push(row)\n    self.update(sheet, cb)\n  })\n}\n\n/**\n* Delete a sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error argument\n* @example\n* client.sheets.delete(function (err)) {\n*\n* })\n*/\nSheets.prototype.delete = function (id, cb) {\n  return this.client.request('delete', 'sheets/' + id, null, cb)\n}\n","path":"sheets.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/sheets.js#L26-L38"},"params":[{"title":"param","description":"the ID of the sheet","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"a callback with error and sheet arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.sheets.get(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, sheet)</span>) </span>{\n\n})"],"name":"get","memberof":"Sheets","scope":"instance","members":{"instance":[],"static":[]},"path":["Sheets","get"]},{"description":"Update a sheet","tags":[{"title":"param","description":"the sheet object","type":{"type":"NameExpression","name":"Object"},"name":"sheet"},{"title":"param","description":"a callback with error and sheet arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.sheets.update(function (err, sheet)) {\n\n})"},{"title":"name","name":"update"},{"title":"memberof","description":"Sheets"},{"title":"instance"}],"context":{"loc":{"start":{"line":64,"column":0},"end":{"line":79,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/sheets.js","code":"module.exports = Sheets\n\n/**\n * Flatsheet Sheets\n * @class Sheets\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.sheets.list()\n */\nfunction Sheets (client) {\n  if (!(this instanceof Sheets)) return new Sheets(client)\n  this.client = client\n}\n\n/**\n* Get sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.get(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.get = function (id, cb) {\n  return this.client.request('get', 'sheets/' + id, null, cb)\n}\n\n/**\n* Get list of sheets\n* @param {Function} callback a callback with error and sheets arguments\n* @example\n* client.sheets.list(function (err, sheets)) {\n*\n* })\n*/\nSheets.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'sheets', opts, cb)\n}\n\n/**\n* Create a sheet\n* @param {Object} the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.create(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.create = function (sheet, cb) {\n  return this.client.request('post', 'sheets', sheet, cb)\n}\n\n/**\n* Update a sheet\n* @param {Object} sheet the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.update(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.update = function (sheet, cb) {\n  return this.client.request('put', 'sheets/' + sheet.id, sheet, cb)\n}\n\n/**\n* Add a row to a sheet\n* @param {String} id the ID of the sheet\n* @param {Object} row an object that represents a row in the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.addRow(function (err, sheet)) {\n*\n* })\n*\n*/\nSheets.prototype.addRow = function addRow (id, row, cb) {\n  var self = this\n\n  this.get(id, function (err, req) {\n    if (err) return cb(err)\n    var sheet = req\n    sheet.rows.push(row)\n    self.update(sheet, cb)\n  })\n}\n\n/**\n* Delete a sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error argument\n* @example\n* client.sheets.delete(function (err)) {\n*\n* })\n*/\nSheets.prototype.delete = function (id, cb) {\n  return this.client.request('delete', 'sheets/' + id, null, cb)\n}\n","path":"sheets.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/sheets.js#L64-L79"},"params":[{"title":"param","description":"the sheet object","type":{"type":"NameExpression","name":"Object"},"name":"sheet"},{"title":"param","description":"a callback with error and sheet arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.sheets.update(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, sheet)</span>) </span>{\n\n})"],"name":"update","memberof":"Sheets","scope":"instance","members":{"instance":[],"static":[]},"path":["Sheets","update"]},{"description":"Delete a sheet","tags":[{"title":"param","description":"the ID of the sheet","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"a callback with error argument","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.sheets.delete(function (err)) {\n\n})"},{"title":"name","name":"delete"},{"title":"memberof","description":"Sheets"},{"title":"instance"}],"context":{"loc":{"start":{"line":99,"column":0},"end":{"line":102,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/sheets.js","code":"module.exports = Sheets\n\n/**\n * Flatsheet Sheets\n * @class Sheets\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.sheets.list()\n */\nfunction Sheets (client) {\n  if (!(this instanceof Sheets)) return new Sheets(client)\n  this.client = client\n}\n\n/**\n* Get sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.get(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.get = function (id, cb) {\n  return this.client.request('get', 'sheets/' + id, null, cb)\n}\n\n/**\n* Get list of sheets\n* @param {Function} callback a callback with error and sheets arguments\n* @example\n* client.sheets.list(function (err, sheets)) {\n*\n* })\n*/\nSheets.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'sheets', opts, cb)\n}\n\n/**\n* Create a sheet\n* @param {Object} the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.create(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.create = function (sheet, cb) {\n  return this.client.request('post', 'sheets', sheet, cb)\n}\n\n/**\n* Update a sheet\n* @param {Object} sheet the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.update(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.update = function (sheet, cb) {\n  return this.client.request('put', 'sheets/' + sheet.id, sheet, cb)\n}\n\n/**\n* Add a row to a sheet\n* @param {String} id the ID of the sheet\n* @param {Object} row an object that represents a row in the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.addRow(function (err, sheet)) {\n*\n* })\n*\n*/\nSheets.prototype.addRow = function addRow (id, row, cb) {\n  var self = this\n\n  this.get(id, function (err, req) {\n    if (err) return cb(err)\n    var sheet = req\n    sheet.rows.push(row)\n    self.update(sheet, cb)\n  })\n}\n\n/**\n* Delete a sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error argument\n* @example\n* client.sheets.delete(function (err)) {\n*\n* })\n*/\nSheets.prototype.delete = function (id, cb) {\n  return this.client.request('delete', 'sheets/' + id, null, cb)\n}\n","path":"sheets.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/sheets.js#L99-L102"},"params":[{"title":"param","description":"the ID of the sheet","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"a callback with error argument","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.sheets.delete(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span>) </span>{\n\n})"],"name":"delete","memberof":"Sheets","scope":"instance","members":{"instance":[],"static":[]},"path":["Sheets","delete"]},{"description":"Create a sheet","tags":[{"title":"param","description":"sheet object","type":{"type":"NameExpression","name":"Object"},"name":"the"},{"title":"param","description":"a callback with error and sheet arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.sheets.create(function (err, sheet)) {\n\n})"},{"title":"name","name":"create"},{"title":"memberof","description":"Sheets"},{"title":"instance"}],"context":{"loc":{"start":{"line":51,"column":0},"end":{"line":64,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/sheets.js","code":"module.exports = Sheets\n\n/**\n * Flatsheet Sheets\n * @class Sheets\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.sheets.list()\n */\nfunction Sheets (client) {\n  if (!(this instanceof Sheets)) return new Sheets(client)\n  this.client = client\n}\n\n/**\n* Get sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.get(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.get = function (id, cb) {\n  return this.client.request('get', 'sheets/' + id, null, cb)\n}\n\n/**\n* Get list of sheets\n* @param {Function} callback a callback with error and sheets arguments\n* @example\n* client.sheets.list(function (err, sheets)) {\n*\n* })\n*/\nSheets.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'sheets', opts, cb)\n}\n\n/**\n* Create a sheet\n* @param {Object} the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.create(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.create = function (sheet, cb) {\n  return this.client.request('post', 'sheets', sheet, cb)\n}\n\n/**\n* Update a sheet\n* @param {Object} sheet the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.update(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.update = function (sheet, cb) {\n  return this.client.request('put', 'sheets/' + sheet.id, sheet, cb)\n}\n\n/**\n* Add a row to a sheet\n* @param {String} id the ID of the sheet\n* @param {Object} row an object that represents a row in the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.addRow(function (err, sheet)) {\n*\n* })\n*\n*/\nSheets.prototype.addRow = function addRow (id, row, cb) {\n  var self = this\n\n  this.get(id, function (err, req) {\n    if (err) return cb(err)\n    var sheet = req\n    sheet.rows.push(row)\n    self.update(sheet, cb)\n  })\n}\n\n/**\n* Delete a sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error argument\n* @example\n* client.sheets.delete(function (err)) {\n*\n* })\n*/\nSheets.prototype.delete = function (id, cb) {\n  return this.client.request('delete', 'sheets/' + id, null, cb)\n}\n","path":"sheets.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/sheets.js#L51-L64"},"params":[{"title":"param","description":"sheet object","type":{"type":"NameExpression","name":"Object"},"name":"the"},{"title":"param","description":"a callback with error and sheet arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.sheets.create(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, sheet)</span>) </span>{\n\n})"],"name":"create","memberof":"Sheets","scope":"instance","members":{"instance":[],"static":[]},"path":["Sheets","create"]},{"description":"Add a row to a sheet","tags":[{"title":"param","description":"the ID of the sheet","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"an object that represents a row in the sheet","type":{"type":"NameExpression","name":"Object"},"name":"row"},{"title":"param","description":"a callback with error and sheet arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.addRow(function (err, sheet)) {\n\n})"},{"title":"name","name":"addRow"},{"title":"memberof","description":"Sheets"},{"title":"instance"}],"context":{"loc":{"start":{"line":79,"column":0},"end":{"line":99,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/sheets.js","code":"module.exports = Sheets\n\n/**\n * Flatsheet Sheets\n * @class Sheets\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.sheets.list()\n */\nfunction Sheets (client) {\n  if (!(this instanceof Sheets)) return new Sheets(client)\n  this.client = client\n}\n\n/**\n* Get sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.get(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.get = function (id, cb) {\n  return this.client.request('get', 'sheets/' + id, null, cb)\n}\n\n/**\n* Get list of sheets\n* @param {Function} callback a callback with error and sheets arguments\n* @example\n* client.sheets.list(function (err, sheets)) {\n*\n* })\n*/\nSheets.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'sheets', opts, cb)\n}\n\n/**\n* Create a sheet\n* @param {Object} the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.create(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.create = function (sheet, cb) {\n  return this.client.request('post', 'sheets', sheet, cb)\n}\n\n/**\n* Update a sheet\n* @param {Object} sheet the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.update(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.update = function (sheet, cb) {\n  return this.client.request('put', 'sheets/' + sheet.id, sheet, cb)\n}\n\n/**\n* Add a row to a sheet\n* @param {String} id the ID of the sheet\n* @param {Object} row an object that represents a row in the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.addRow(function (err, sheet)) {\n*\n* })\n*\n*/\nSheets.prototype.addRow = function addRow (id, row, cb) {\n  var self = this\n\n  this.get(id, function (err, req) {\n    if (err) return cb(err)\n    var sheet = req\n    sheet.rows.push(row)\n    self.update(sheet, cb)\n  })\n}\n\n/**\n* Delete a sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error argument\n* @example\n* client.sheets.delete(function (err)) {\n*\n* })\n*/\nSheets.prototype.delete = function (id, cb) {\n  return this.client.request('delete', 'sheets/' + id, null, cb)\n}\n","path":"sheets.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/sheets.js#L79-L99"},"params":[{"title":"param","description":"the ID of the sheet","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"an object that represents a row in the sheet","type":{"type":"NameExpression","name":"Object"},"name":"row"},{"title":"param","description":"a callback with error and sheet arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.addRow(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, sheet)</span>) </span>{\n\n})"],"name":"addRow","memberof":"Sheets","scope":"instance","members":{"instance":[],"static":[]},"path":["Sheets","addRow"]},{"description":"Get list of sheets","tags":[{"title":"param","description":"a callback with error and sheets arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"},{"title":"example","description":"client.sheets.list(function (err, sheets)) {\n\n})"},{"title":"name","name":"list"},{"title":"memberof","description":"Sheets"},{"title":"instance"}],"context":{"loc":{"start":{"line":38,"column":0},"end":{"line":51,"column":0}},"file":"/Users/sethvincent/workspace/flatsheet/api-client/sheets.js","code":"module.exports = Sheets\n\n/**\n * Flatsheet Sheets\n * @class Sheets\n * @param {Object} client\n * @example\n * var flatsheet = require('flatsheet-api-client');\n * var client = flatsheet();\n * client.sheets.list()\n */\nfunction Sheets (client) {\n  if (!(this instanceof Sheets)) return new Sheets(client)\n  this.client = client\n}\n\n/**\n* Get sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.get(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.get = function (id, cb) {\n  return this.client.request('get', 'sheets/' + id, null, cb)\n}\n\n/**\n* Get list of sheets\n* @param {Function} callback a callback with error and sheets arguments\n* @example\n* client.sheets.list(function (err, sheets)) {\n*\n* })\n*/\nSheets.prototype.list = function (opts, cb) {\n  return this.client.request('get', 'sheets', opts, cb)\n}\n\n/**\n* Create a sheet\n* @param {Object} the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.create(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.create = function (sheet, cb) {\n  return this.client.request('post', 'sheets', sheet, cb)\n}\n\n/**\n* Update a sheet\n* @param {Object} sheet the sheet object\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.sheets.update(function (err, sheet)) {\n*\n* })\n*/\nSheets.prototype.update = function (sheet, cb) {\n  return this.client.request('put', 'sheets/' + sheet.id, sheet, cb)\n}\n\n/**\n* Add a row to a sheet\n* @param {String} id the ID of the sheet\n* @param {Object} row an object that represents a row in the sheet\n* @param {Function} callback a callback with error and sheet arguments\n* @example\n* client.addRow(function (err, sheet)) {\n*\n* })\n*\n*/\nSheets.prototype.addRow = function addRow (id, row, cb) {\n  var self = this\n\n  this.get(id, function (err, req) {\n    if (err) return cb(err)\n    var sheet = req\n    sheet.rows.push(row)\n    self.update(sheet, cb)\n  })\n}\n\n/**\n* Delete a sheet\n* @param {String} id the ID of the sheet\n* @param {Function} callback a callback with error argument\n* @example\n* client.sheets.delete(function (err)) {\n*\n* })\n*/\nSheets.prototype.delete = function (id, cb) {\n  return this.client.request('delete', 'sheets/' + id, null, cb)\n}\n","path":"sheets.js","github":"https://github.com/flatsheet/flatsheet-javascript-client/blob/6b7e491fb9cdb1965a825bd215791dc575dac8cb/sheets.js#L38-L51"},"params":[{"title":"param","description":"a callback with error and sheets arguments","type":{"type":"NameExpression","name":"Function"},"name":"callback"}],"examples":["client.sheets.list(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, sheets)</span>) </span>{\n\n})"],"name":"list","memberof":"Sheets","scope":"instance","members":{"instance":[],"static":[]},"path":["Sheets","list"]}],"static":[]},"path":["Sheets"]}]